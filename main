-- ESP/Visuals per Drawing API, Nametag/Healthbar/Distance. ESP-Check alle 0.2s auf Join/Leave/Respawn/Tod. Positionen laufen smooth, robust, kein stuck!

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer

local HEALTHBAR_BG = Color3.fromRGB(40,40,40)
local HEALTHBAR_WIDTH = 4
local NAMETAG_FONT = 3

local DRAWINGS = {}
local PLAYER_STATES = {}

local function removeDrawings(plr)
    local t = DRAWINGS[plr]
    if t then
        for _,v in pairs(t) do
            if v and v.Remove then pcall(function() v:Remove() end) end
        end
        DRAWINGS[plr]=nil
    end
    PLAYER_STATES[plr] = nil
end

local function createDrawings(plr)
    local nametag = Drawing.new("Text")
    nametag.Visible = false
    nametag.Size = 17
    nametag.Font = NAMETAG_FONT
    nametag.Color = Color3.new(1,1,1)
    nametag.Outline = true
    nametag.OutlineColor = Color3.new(0,0,0)
    nametag.Center = true
    nametag.Text = plr.Name

    local healthbg = Drawing.new("Line")
    healthbg.Visible = false
    healthbg.Color = HEALTHBAR_BG
    healthbg.Thickness = HEALTHBAR_WIDTH

    local healthfg = Drawing.new("Line")
    healthfg.Visible = false
    healthfg.Color = Color3.fromRGB(80,255,80)
    healthfg.Thickness = HEALTHBAR_WIDTH-1

    local disttag = Drawing.new("Text")
    disttag.Visible = false
    disttag.Size = 16
    disttag.Font = NAMETAG_FONT
    disttag.Color = Color3.new(1,1,1)
    disttag.Outline = true
    disttag.OutlineColor = Color3.new(0,0,0)
    disttag.Center = true

    DRAWINGS[plr] = {
        nametag=nametag,
        healthbg=healthbg,
        healthfg=healthfg,
        disttag=disttag
    }
end

local function getPlayerState(plr)
    local char = plr.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    if not char or not char:FindFirstChild("HumanoidRootPart") or not hum then
        return "dead"
    end
    return hum.Health > 0 and "alive" or "dead"
end

-- 0.2s State Checker (Checkt Join, Leave, Respawn, Tod, Wiederbeleben)
task.spawn(function()
    while true do
        local seen = {}
        for _,plr in ipairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer then
                seen[plr] = true
                local state = getPlayerState(plr)
                if not PLAYER_STATES[plr] or PLAYER_STATES[plr] ~= state then
                    PLAYER_STATES[plr] = state
                    removeDrawings(plr)
                    if state == "alive" then
                        createDrawings(plr)
                    end
                end
            end
        end
        -- Remove visuals for leaved players
        for plr in pairs(DRAWINGS) do
            if not seen[plr] then
                removeDrawings(plr)
            end
        end
        task.wait(0.2)
    end
end)

-- RenderStepped: Position/Visual-Update nur f√ºr aktive Drawings!
RunService.RenderStepped:Connect(function()
    for plr, t in pairs(DRAWINGS) do
        local char = plr.Character
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        if not char or not char:FindFirstChild("HumanoidRootPart") or not hum or hum.Health <= 0 then
            t.nametag.Visible = false
            t.healthbg.Visible = false
            t.healthfg.Visible = false
            t.disttag.Visible = false
        else
            local hrp = char.HumanoidRootPart
            local camera = workspace.CurrentCamera
            local cframe = hrp.CFrame
            local size = hrp.Size
            local points, allOnScreen = {}, true
            for x = -0.5,0.5,1 do
                for y = -1,1,2 do
                    for z = -0.5,0.5,1 do
                        local world = cframe * Vector3.new(size.X*x, size.Y*y, size.Z*z)
                        local s, o = camera:WorldToViewportPoint(world)
                        if not o or s.Z < 0 then allOnScreen = false end
                        table.insert(points, Vector2.new(s.X,s.Y))
                    end
                end
            end
            if not allOnScreen then
                t.nametag.Visible = false
                t.healthbg.Visible = false
                t.healthfg.Visible = false
                t.disttag.Visible = false
            else
                local minX, minY, maxX, maxY = math.huge, math.huge, -math.huge, -math.huge
                for _,v in pairs(points) do
                    minX = math.min(minX, v.X)
                    minY = math.min(minY, v.Y)
                    maxX = math.max(maxX, v.X)
                    maxY = math.max(maxY, v.Y)
                end
                t.nametag.Position = Vector2.new((minX+maxX)/2, minY-18)
                t.nametag.Visible = true

                t.healthbg.From = Vector2.new(minX-8, maxY)
                t.healthbg.To = Vector2.new(minX-8, minY)
                t.healthbg.Visible = true

                local hpFrac = math.clamp(hum.Health/hum.MaxHealth,0,1)
                t.healthfg.From = Vector2.new(minX-8, maxY)
                t.healthfg.To = Vector2.new(minX-8, maxY-(maxY-minY)*hpFrac)
                t.healthfg.Color = Color3.fromRGB(255-math.floor(255*hpFrac),math.floor(255*hpFrac),0)
                t.healthfg.Visible = true

                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local dist = (LocalPlayer.Character.HumanoidRootPart.Position - hrp.Position).Magnitude
                    t.disttag.Text = string.format("%.1f studs", dist)
                    t.disttag.Position = Vector2.new((minX+maxX)/2, maxY+18)
                    t.disttag.Visible = true
                else
                    t.disttag.Visible = false
                end
            end
        end
    end
end)

-- ==== SPEED GUI + BUNNYHOP (wie gehabt) ====
local function removeOldSpeedGui()
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    if playerGui then
        local old = playerGui:FindFirstChild("SpeedDisplay")
        if old then old:Destroy() end
    end
end

local function createSpeedGui()
    removeOldSpeedGui()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "SpeedDisplay"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local maxLabel = Instance.new("TextLabel")
    maxLabel.Name = "MaxSpeedLabel"
    maxLabel.AnchorPoint = Vector2.new(0.5, 1)
    maxLabel.Position = UDim2.new(0.5, 0, 0.86, 0)
    maxLabel.Size = UDim2.new(0, 220, 0, 32)
    maxLabel.BackgroundTransparency = 1
    maxLabel.TextColor3 = Color3.new(0, 0, 0)
    maxLabel.TextStrokeTransparency = 1
    maxLabel.TextScaled = true
    maxLabel.Font = Enum.Font.SourceSansBold
    maxLabel.Text = "(0.0u/s)"
    maxLabel.Parent = screenGui

    local label = Instance.new("TextLabel")
    label.Name = "SpeedLabel"
    label.AnchorPoint = Vector2.new(0.5, 1)
    label.Position = UDim2.new(0.5, 0, 0.90, 0)
    label.Size = UDim2.new(0, 220, 0, 40)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 1
    label.TextScaled = true
    label.Font = Enum.Font.SourceSansBold
    label.Text = "0.0u/s"
    label.Parent = screenGui

    return label, maxLabel
end

local speedLabel, maxLabel = createSpeedGui()

local humanoid
local rootPart
local jumping = false
local highestSpeed = 0
local bunnyhopActive = false
local lastBunnyhop = tick()
local bunnyhopResetDelay = 5

local function getHumanoidAndRoot()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hum = character:FindFirstChildOfClass("Humanoid")
    while not hum do
        character.ChildAdded:Wait()
        hum = character:FindFirstChildOfClass("Humanoid")
    end
    local rp = character:FindFirstChild("HumanoidRootPart")
    while not rp do
        character.ChildAdded:Wait()
        rp = character:FindFirstChild("HumanoidRootPart")
    end
    return hum, rp
end

RunService.RenderStepped:Connect(function()
    if not humanoid or not rootPart then return end
    local speed = Vector3.new(rootPart.AssemblyLinearVelocity.X, 0, rootPart.AssemblyLinearVelocity.Z).Magnitude
    speedLabel.Text = string.format("%.1fu/s", speed)
    if jumping then
        lastBunnyhop = tick()
        bunnyhopActive = true
        if speed > highestSpeed then
            highestSpeed = speed
            maxLabel.Text = string.format("(%.1fu/s)", highestSpeed)
        end
    else
        if bunnyhopActive and tick() - lastBunnyhop > bunnyhopResetDelay then
            highestSpeed = 0
            maxLabel.Text = string.format("(%.1fu/s)", highestSpeed)
            bunnyhopActive = false
        end
    end
    if jumping then
        local vel = rootPart.AssemblyLinearVelocity
        local xzVel = Vector3.new(vel.X, 0, vel.Z)
        humanoid.Jump = true
        task.defer(function()
            if humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                local curVel = rootPart.AssemblyLinearVelocity
                rootPart.AssemblyLinearVelocity = Vector3.new(xzVel.X, curVel.Y, xzVel.Z)
            end
        end)
    end
end)

UserInputService.InputBegan:Connect(function(input, processed)
    if not processed and input.KeyCode == Enum.KeyCode.Space then
        humanoid, rootPart = getHumanoidAndRoot()
        jumping = true
        lastBunnyhop = tick()
        bunnyhopActive = true
    end
end)
UserInputService.InputEnded:Connect(function(input, processed)
    if input.KeyCode == Enum.KeyCode.Space then
        jumping = false
        if humanoid then humanoid.Jump = false end
    end
end)
LocalPlayer.CharacterAdded:Connect(function()
    humanoid, rootPart = getHumanoidAndRoot()
end)
